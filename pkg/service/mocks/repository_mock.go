// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mtvarkovsky/go-mapreduce/pkg/service (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mapreduce "github.com/mtvarkovsky/go-mapreduce/pkg/mapreduce"
	repository "github.com/mtvarkovsky/go-mapreduce/pkg/repository"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateMapTask mocks base method.
func (m *MockRepository) CreateMapTask(arg0 context.Context, arg1 mapreduce.MapTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMapTask indicates an expected call of CreateMapTask.
func (mr *MockRepositoryMockRecorder) CreateMapTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapTask", reflect.TypeOf((*MockRepository)(nil).CreateMapTask), arg0, arg1)
}

// CreateReduceTask mocks base method.
func (m *MockRepository) CreateReduceTask(arg0 context.Context, arg1 mapreduce.ReduceTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReduceTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReduceTask indicates an expected call of CreateReduceTask.
func (mr *MockRepositoryMockRecorder) CreateReduceTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReduceTask", reflect.TypeOf((*MockRepository)(nil).CreateReduceTask), arg0, arg1)
}

// GetMapTask mocks base method.
func (m *MockRepository) GetMapTask(arg0 context.Context, arg1 string) (mapreduce.MapTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapTask", arg0, arg1)
	ret0, _ := ret[0].(mapreduce.MapTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapTask indicates an expected call of GetMapTask.
func (mr *MockRepositoryMockRecorder) GetMapTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapTask", reflect.TypeOf((*MockRepository)(nil).GetMapTask), arg0, arg1)
}

// GetReduceTask mocks base method.
func (m *MockRepository) GetReduceTask(arg0 context.Context, arg1 string) (mapreduce.ReduceTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReduceTask", arg0, arg1)
	ret0, _ := ret[0].(mapreduce.ReduceTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReduceTask indicates an expected call of GetReduceTask.
func (mr *MockRepositoryMockRecorder) GetReduceTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReduceTask", reflect.TypeOf((*MockRepository)(nil).GetReduceTask), arg0, arg1)
}

// QueryMapTasks mocks base method.
func (m *MockRepository) QueryMapTasks(arg0 context.Context, arg1 repository.Filter) ([]mapreduce.MapTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMapTasks", arg0, arg1)
	ret0, _ := ret[0].([]mapreduce.MapTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMapTasks indicates an expected call of QueryMapTasks.
func (mr *MockRepositoryMockRecorder) QueryMapTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMapTasks", reflect.TypeOf((*MockRepository)(nil).QueryMapTasks), arg0, arg1)
}

// QueryReduceTasks mocks base method.
func (m *MockRepository) QueryReduceTasks(arg0 context.Context, arg1 repository.Filter) ([]mapreduce.ReduceTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryReduceTasks", arg0, arg1)
	ret0, _ := ret[0].([]mapreduce.ReduceTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryReduceTasks indicates an expected call of QueryReduceTasks.
func (mr *MockRepositoryMockRecorder) QueryReduceTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryReduceTasks", reflect.TypeOf((*MockRepository)(nil).QueryReduceTasks), arg0, arg1)
}

// Transaction mocks base method.
func (m *MockRepository) Transaction(arg0 context.Context, arg1 func(context.Context) (interface{}, error)) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction.
func (mr *MockRepositoryMockRecorder) Transaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockRepository)(nil).Transaction), arg0, arg1)
}

// UpdateMapTask mocks base method.
func (m *MockRepository) UpdateMapTask(arg0 context.Context, arg1 mapreduce.MapTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMapTask indicates an expected call of UpdateMapTask.
func (mr *MockRepositoryMockRecorder) UpdateMapTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapTask", reflect.TypeOf((*MockRepository)(nil).UpdateMapTask), arg0, arg1)
}

// UpdateMapTasks mocks base method.
func (m *MockRepository) UpdateMapTasks(arg0 context.Context, arg1 []string, arg2 repository.UpdateFields) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapTasks", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMapTasks indicates an expected call of UpdateMapTasks.
func (mr *MockRepositoryMockRecorder) UpdateMapTasks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapTasks", reflect.TypeOf((*MockRepository)(nil).UpdateMapTasks), arg0, arg1, arg2)
}

// UpdateReduceTask mocks base method.
func (m *MockRepository) UpdateReduceTask(arg0 context.Context, arg1 mapreduce.ReduceTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReduceTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReduceTask indicates an expected call of UpdateReduceTask.
func (mr *MockRepositoryMockRecorder) UpdateReduceTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReduceTask", reflect.TypeOf((*MockRepository)(nil).UpdateReduceTask), arg0, arg1)
}

// UpdateReduceTasks mocks base method.
func (m *MockRepository) UpdateReduceTasks(arg0 context.Context, arg1 []string, arg2 repository.UpdateFields) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReduceTasks", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReduceTasks indicates an expected call of UpdateReduceTasks.
func (mr *MockRepositoryMockRecorder) UpdateReduceTasks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReduceTasks", reflect.TypeOf((*MockRepository)(nil).UpdateReduceTasks), arg0, arg1, arg2)
}
