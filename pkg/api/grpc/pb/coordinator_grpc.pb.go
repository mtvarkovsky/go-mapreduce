// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: coordinator.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// CreateMapTask - create new MapTask
	CreateMapTask(ctx context.Context, in *NewMapTask, opts ...grpc.CallOption) (*MapTask, error)
	// CreateReduceTask - create new ReduceTask
	CreateReduceTask(ctx context.Context, in *NewReduceTask, opts ...grpc.CallOption) (*ReduceTask, error)
	// GetMapTask - get MapTask for processing
	GetMapTask(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MapTask, error)
	// GetReduceTask - get ReduceTask for processing
	GetReduceTask(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReduceTask, error)
	// ReportMapTaskResult - report result of MapTask execution
	ReportMapTaskResult(ctx context.Context, in *MapTaskResult, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ReportReduceTaskResult - report result of ReduceTask execution
	ReportReduceTaskResult(ctx context.Context, in *ReduceTaskResult, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// FlushCreatedTasksToWorkers - send created tasks to workers, useful if some or all of the workers died / failed
	FlushCreatedTasksToWorkers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) CreateMapTask(ctx context.Context, in *NewMapTask, opts ...grpc.CallOption) (*MapTask, error) {
	out := new(MapTask)
	err := c.cc.Invoke(ctx, "/coordinator.Service/CreateMapTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateReduceTask(ctx context.Context, in *NewReduceTask, opts ...grpc.CallOption) (*ReduceTask, error) {
	out := new(ReduceTask)
	err := c.cc.Invoke(ctx, "/coordinator.Service/CreateReduceTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetMapTask(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MapTask, error) {
	out := new(MapTask)
	err := c.cc.Invoke(ctx, "/coordinator.Service/GetMapTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetReduceTask(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReduceTask, error) {
	out := new(ReduceTask)
	err := c.cc.Invoke(ctx, "/coordinator.Service/GetReduceTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ReportMapTaskResult(ctx context.Context, in *MapTaskResult, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/coordinator.Service/ReportMapTaskResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ReportReduceTaskResult(ctx context.Context, in *ReduceTaskResult, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/coordinator.Service/ReportReduceTaskResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) FlushCreatedTasksToWorkers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/coordinator.Service/FlushCreatedTasksToWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// CreateMapTask - create new MapTask
	CreateMapTask(context.Context, *NewMapTask) (*MapTask, error)
	// CreateReduceTask - create new ReduceTask
	CreateReduceTask(context.Context, *NewReduceTask) (*ReduceTask, error)
	// GetMapTask - get MapTask for processing
	GetMapTask(context.Context, *emptypb.Empty) (*MapTask, error)
	// GetReduceTask - get ReduceTask for processing
	GetReduceTask(context.Context, *emptypb.Empty) (*ReduceTask, error)
	// ReportMapTaskResult - report result of MapTask execution
	ReportMapTaskResult(context.Context, *MapTaskResult) (*emptypb.Empty, error)
	// ReportReduceTaskResult - report result of ReduceTask execution
	ReportReduceTaskResult(context.Context, *ReduceTaskResult) (*emptypb.Empty, error)
	// FlushCreatedTasksToWorkers - send created tasks to workers, useful if some or all of the workers died / failed
	FlushCreatedTasksToWorkers(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) CreateMapTask(context.Context, *NewMapTask) (*MapTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMapTask not implemented")
}
func (UnimplementedServiceServer) CreateReduceTask(context.Context, *NewReduceTask) (*ReduceTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReduceTask not implemented")
}
func (UnimplementedServiceServer) GetMapTask(context.Context, *emptypb.Empty) (*MapTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapTask not implemented")
}
func (UnimplementedServiceServer) GetReduceTask(context.Context, *emptypb.Empty) (*ReduceTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReduceTask not implemented")
}
func (UnimplementedServiceServer) ReportMapTaskResult(context.Context, *MapTaskResult) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMapTaskResult not implemented")
}
func (UnimplementedServiceServer) ReportReduceTaskResult(context.Context, *ReduceTaskResult) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportReduceTaskResult not implemented")
}
func (UnimplementedServiceServer) FlushCreatedTasksToWorkers(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushCreatedTasksToWorkers not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_CreateMapTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMapTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateMapTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Service/CreateMapTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateMapTask(ctx, req.(*NewMapTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateReduceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewReduceTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateReduceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Service/CreateReduceTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateReduceTask(ctx, req.(*NewReduceTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetMapTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetMapTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Service/GetMapTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetMapTask(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetReduceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetReduceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Service/GetReduceTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetReduceTask(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ReportMapTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapTaskResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ReportMapTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Service/ReportMapTaskResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ReportMapTaskResult(ctx, req.(*MapTaskResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ReportReduceTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceTaskResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ReportReduceTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Service/ReportReduceTaskResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ReportReduceTaskResult(ctx, req.(*ReduceTaskResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_FlushCreatedTasksToWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).FlushCreatedTasksToWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Service/FlushCreatedTasksToWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).FlushCreatedTasksToWorkers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coordinator.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMapTask",
			Handler:    _Service_CreateMapTask_Handler,
		},
		{
			MethodName: "CreateReduceTask",
			Handler:    _Service_CreateReduceTask_Handler,
		},
		{
			MethodName: "GetMapTask",
			Handler:    _Service_GetMapTask_Handler,
		},
		{
			MethodName: "GetReduceTask",
			Handler:    _Service_GetReduceTask_Handler,
		},
		{
			MethodName: "ReportMapTaskResult",
			Handler:    _Service_ReportMapTaskResult_Handler,
		},
		{
			MethodName: "ReportReduceTaskResult",
			Handler:    _Service_ReportReduceTaskResult_Handler,
		},
		{
			MethodName: "FlushCreatedTasksToWorkers",
			Handler:    _Service_FlushCreatedTasksToWorkers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator.proto",
}
